.. _quick:

Quickstart
===========

Follow these instructions to quickly start using the SLX Plugin.
The instructions explain how to execute the provided examples and interpret the
results.


Setup
^^^^^

The SLX Plugin is currently supported for Ubuntu 18.04.
Make sure Vitis HLS 2020.2 is installed in your machine.
After untarring the plugin, execute the following command from within the
plugin's root directory:

.. code-block:: bash
   
   source exports

Run the command in the same console where you will later run Vitis HLS.
The shell needs to be configured to run the Vitis tools.


Exploring the examples
^^^^^^^^^^^^^^^^^^^^^^

The SLX Plugin is shipped with several examples.
Examples include C/C++ source code, scripts and reference results files.
For a quick start, go to an example folder and execute the provided ``check.sh``
script.
For example, perform the following to start with the ``dimension_reduction``
example:

.. code-block:: bash

   cd examples/dimension_reduction/reduce_2d_to_1d
   ./check.sh

The script will call Vitis HLS and synthesize the design.
The script will generate different solutions using different features of
the SLX Plugin. For example, there will be solutions with and without loop
interchange.
Co-simulation is not run by default, but can be enabled by editing
``x_hls.tcl`` and setting ``hls_exec`` to 2.

Key values are extracted from Vitis HLS solution reports and captured in a
newly created ``latency.ref`` file.
If the results differ from the ones saved in ``latency.ref`` you'll get a
message.
A different file called ``latency.new`` will be created.
This could happen if you use a different Vitis HLS version from the one used
when ``latency.ref`` was created.

Investigating the results
^^^^^^^^^^^^^^^^^^^^^^^^^^

Almost all examples generate the following three solutions:

* ``vanilla``: uses Vitis HLS off-the-shelf without any SLX Plugin additions.
* ``nointerchange``: applies :ref:`tidy-up`. This can already change
  results for some examples, but it doesn't interchange the loops.
* ``interchange``: applies ``_SLXLoopInterchange`` directives inserted in the
  example source files by interchanging the specified loop nests.

Some examples generate a few more results because, for example, they
generate additional solutions to illustrate additional effects on the design,
such as the effect of different target clock constraints.
This is the case for ``dimension_reduction``.

Looking at the tables in ``latency.ref`` file helps in comparing some key
results.
The Vitis HLS project that is also produced can be opened in the Vitis HLS
GUI for more detailed inspection.
The following is an excerpt of ``latency.ref`` for the ``dimension_reduction``
example. The table shows changes in the hotspot loop's latency and initiation interval.
When comparing ``vanilla`` to ``interchange``, iteration latency goes from
1800 to 269 when measured at the outer loop and initiation interval goes from
7 to 1 for the inner loop.
This means that ``interchange`` achieves an improvement of ~7x.

.. TODO include file from source later
   .. literalinclude:: ../../examples/dimension_reduction/reduce_2d_to_1d
      :lines: 1-30
 
.. code-block:: none

   ## 0.vanilla: no LLVM_CUSTOM_CMD, no directives (clock: 333MHz)
   │              │  Latency (cycles) │ Iteration│  Initiation Interval  │
   │  Loop Name   │   min   │   max   │  Latency │  achieved │   target  │
   ├─ loop_out    │   460800│   460800│      1800│          -│          -│
   │  └─ loop_in  │     1796│     1796│        12│          7│          1│

   ## 2.interchange: LLVM_CUSTOM_CMD -slx-loop-interchange, no other  directives (clock: 333MHz)
   │              │  Latency (cycles) │ Iteration│  Initiation Interval  │
   │  Loop Name   │   min   │   max   │  Latency │  achieved │   target  │
   ├─ loop_in     │    68863│    68863│       269│          -│          -│
   │  └─ loop_out │      266│      266│        12│          1│          1│
     
Interchanging moves a key loop carried dependency from the inner to the outer
loop. With that done, Vitis HLS is free to pipeline the inner loop with a far
better initiation interval (II).

Whether a loop carried dependency plays a key role depends on the latency of
the operations needed to compute a new value from the old value.
The ``dimension_reduction`` example explores this by comparing the design at
333MHz and 85MHz. At the lower frequency, the operation completes within a
cycle and the dependency no longer plays a key role--this is visible in
``latency.ref`` as interchanging does not help this design at 85MHz.


Using the loop interchange directive
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This section explains how to enable the SLX Plugin and apply
``_SLXLoopInterchange`` quickly to start with your own design.
For using the SLX Plugin in an existing project, a couple of additional
Tcl commands should be added to your design's Tcl files to steer Vitis HLS -
see :ref:`vitis-tcl-proj` or :ref:`vitis-gui-proj` for details. In
``dimension_reduction`` ``run_hls.tcl`` the additions are:

.. code-block:: none

   # 1. Variable pointing at the plugin location
   set slxplugin [file normalize $::env(SLX_VITIS_PLUGIN_HOME)]
   
   # 2. Include slxplugin.h when compiling the design file
   add_files code.cpp -cflags "-include $slxplugin/include/slxplugin.h"
   
   # 3. Add slxplugin.so using Vitis HLS injection mechanism
   #    - $slx_options are solution-specific options, and -slx-remove-directives
   #      is to remove the directive if it is not being used for a solution
   set ::LLVM_CUSTOM_CMD [concat \
       {$LLVM_CUSTOM_OPT -load} $slxplugin/lib/slxplugin.so \
       $slx_options -slx-remove-directives \
       {$LLVM_CUSTOM_INPUT -o $LLVM_CUSTOM_OUTPUT}]

Afterwards, using the loop interchange directive in the source code is very
simple. Just add ``_SLXLoopInterchange();`` (note the C function call style
syntax [#f1]_) to a loop nest, under the loop level
that you want to interchange with its immediate parent loop.
The following code shows how this is done for a loop nest composed of the outer
``loop_out`` and the inner ``loop_in`` loops. Since the directive is added under
the latter, the transformation will make ``loop_in`` the outer loop and ``loop_out``
the inner loop. This will effectively transform the ``i then j`` iteration
order into ``j then i``.

.. code-block:: C

     loop_out:for (int i = 0; i < N; i += 1) {
       loop_in:for (int j = 0; j < N; j += 1) {
         _SLXLoopInterchange();
         acc[i] = acc[i] + data[i][j];
       }}


.. rubric:: Footnotes

.. [#f1] The C function call style syntax will be modified in a future release
   to be syntactically closer to Xilinx HLS pragmas.

