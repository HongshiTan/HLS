.. _instructions:

Instructions
============

This section provides installation steps and instructions to use the SLX Plugin
in stand-alone mode with Vitis 2020.2. For instructions to use the plugin with
SLX FPGA, refer to the `SLX FPGA User Guide`_ after following the steps in
the :ref:`installation` section.


Supported machines and requirements
-----------------------------------

The SLX Plugin currently supports [#f1]_ Ubuntu 18.04 on x86_64 architectures.
The next steps assume that Ubuntu 18.04 has been installed on your machine.
Since the SLX Plugin is an add-on for Vitis 2020.2, these steps also assume that
Vitis is properly installed on your machine.



Package contents
----------------

Untar the provided SLX Plugin package. This should result in the following
folder structure:

.. code-block:: bash
   
   .
   └── slxplugin-x.y.z
       ├── doc
       ├── examples
       ├── exports
       ├── include
       │   └── slxplugin.h
       ├── lib
       │   └── slxplugin.so
       └── README

The contents are as follows:

* *doc*: the SLX Plugin documentation in html and pdf format.
* *examples*: example designs that benefit from the SLX Plugin transformations
  and show the plugin in action.
* *exports*: setup script. Source this script every time you want to use the
  plugin.
* *include*: the SLX Plugin header file to be added via a Vitis HLS Tcl script
  to activate the plugin.
* *lib*: the SLX Plugin library file to be added via a Vitis HLS Tcl script to
  activate the plugin.
* *README*: file with quick pointers and guidelines.


.. _installation: 

Installation
------------

Once the SLX Plugin is unpacked, no further installation is required.
Just execute the following
command in your Linux console. This allows our example scripts and SLX
FPGA to locate the plugin files in your machine.

.. code-block:: bash

   source exports

This will set the environment variable ``SLX_VITIS_PLUGIN_HOME`` to the location
of your SLX Plugin package.

.. attention::
   ``SLX_VITIS_PLUGIN_HOME`` is only set in the console session where the
   command is executed. Execute it in the console where you will execute
   Vitis HLS.
   If you open a new console, remember to execute the command again.

.. tip::
   Add the command to your ``.bashrc`` if you want to automatically set
   ``SLX_VITIS_PLUGIN_HOME`` every time a new console is opened.


Afterwards, the SLX Plugin can be injected into the Vitis HLS compilation flow
by adding just a few Tcl commands to an :ref:`vitis-tcl-proj` or an
:ref:`vitis-gui-proj`.
If you use the SLX Plugin with SLX FPGA, read how to use the plugin with an
:ref:`slx-fpga-project`.


.. _vitis-tcl-proj:

Existing Vitis HLS Command Line Project (Tcl)
---------------------------------------------

If your Vitis HLS project is a command line project based on Tcl, you can enable
the plugin by adding the following commands to your script:

.. literalinclude:: setup-script.tcl
   :language: none
   :name: Setup Tcl script

These three commands will activate the SLX Plugin for your design.
They perform the following actions:

1. The first command sets a variable that points to the plugin installation
   directory.

2. The second command adds the plugin header file that enables Vitis HLS
   compilation with the SLX Plugin directives.
   Replace ``<your-design-files>`` with your actual C/C++ files
   that contain additional SLX Plugin directives.

3. The third command injects the plugin library file into the Vitis HLS
   synthesis process. This allows performing the transformations provided
   by the SLX Plugin.
   Replace ``<slx-plugin-options>`` with the SLX Plugin options for the current
   solution.
   For example, replace it with ``-slx-prepare-for-interchange -slx-loop-interchange`` when using the plugin with the  ``_SLXLoopInterchange`` directive.
   ``csynth_design`` applies these options during synthesis.
   Options currently supported by the SLX Plugin are described in the
   :ref:`options` section.
   

.. _vitis-gui-proj:

Existing Vitis HLS GUI Project
------------------------------

.. TODO: create a Vitis project, locate the tcl file and show here what to add
   the following text is invented and not tested.

If you have an existing Vitis HLS GUI project, you need to perform two steps:

* in the GUI, update the ``CFLAGS`` in ``Project`` *-\>* ``Project Settings``
  dialog, under the Synthesis tab.
  Add ``-include $::env(SLX_VITIS_PLUGIN_HOME)/include/slxplugin.h`` as shown
  in the picture:
  
  .. figure:: images/cflags.png
   :alt: SLX Plugin for Vitis HLS

   Include the SLX Plugin header in CFLAGS.



* Add the code below to ``scripts/vitis_hls_init.tcl``. You can create the file
  in the GUI using ``File`` *-\>* ``New File``. If the ``scripts`` folder is not
  yet present, click the ``Create Folder`` icon to add it. Create the 
  ``vitis_hls_init.tcl`` in that folder. The file opens in the GUI but is not
  editable there. Use ``File`` *-\>* ``New File`` again to open the dialog and
  go to the ``scripts`` folder. Right-click on ``vitis_hls_init.tcl`` and
  ``Copy location`` to get the path. Please then open the file with your
  favorite text editor to add the code:
 
  .. code-block:: none
     
     # add slxplugin.so using Vitis HLS injection mechanism
     set ::LLVM_CUSTOM_CMD [concat \
         {$LLVM_CUSTOM_OPT -load} $::env(SLX_VITIS_PLUGIN_HOME)/lib/slxplugin.so \
         <slx-plugin-options> \
         {$LLVM_CUSTOM_INPUT -o $LLVM_CUSTOM_OUTPUT}]
  
These are adaptations of the commands already explained in the previous section
for using the SLX Plugin with an :ref:`vitis-tcl-proj`.
Make sure that you are modifying the file that corresponds to your active
solution, and remember to adapt ``<slx-plugin-options>`` as explained before.


.. _option-sets:

Main option combinations
------------------------

The most useful sets of SLX Plugin options to use as ``<slx-plugin-options>``
are:

* To use :ref:`interchange`, enable with:
  
  .. code-block:: none
  
     -slx-prepare-for-interchange -slx-loop-interchange

  * To have the ``_SLXLoopInterchange()`` directive in the source code but skip
    its application or ignore a failure to apply it: add
    ``-slx-remove-directives`` to the previous set.

* To try out :ref:`tidy-up`, enable with:

  .. code-block:: none
  
     -slx-prepare-for-interchange -slx-prepare-all

The options are explained at the end of this chapter in the :ref:`options`
section.

.. _interchange:

Loop Interchange (``_SLXLoopInterchange``)
------------------------------------------

The SLX Plugin augments Vitis HLS with an additional optimization directive
for achieving higher performance.
The new synthesis directive is called ``_SLXLoopInterchange`` and can be applied
to a system of nested loops for performing a loop interchange.
Loop interchange is a transformation that operates by exchanging the order of
two iteration variables in the loop nest, effectively interchanging the
iteration order in the loop system.

``_SLXLoopInterchange`` is used in the source code like any other Xilinx
HLS pragma. When added to a loop that is part of a loop nest, the SLX Plugin
will interchange the target loop and its immediate parent.
The target loop is defined as the loop that contains ``_SLXLoopInterchange``
within its direct body's scope.
The directive is using the C function call style syntax [#f2]_ as shown in the
next few examples.
The ``<slx-plugin-options>`` to apply this directive are
``-slx-prepare-for-interchange -slx-loop-interchange``.

First, consider the code excerpt shown below:

.. code-block:: C

     LoopN: for ( int i = 0; i < n; i++ ) {
     LoopM:   for ( int j = 0; j < m; j++ ) {
                _SLXLoopInterchange();
                out[i][j] = compute( in[i][j] );
            }}


It has a nested loop composed of ``LoopN`` (the inner loop) and ``LoopM``
(the outer loop).
The ``_SLXLoopInterchange`` directive is added under ``LoopM``, which turns
into the target to be interchanged with its immediate parent.
Since ``LoopM`` has only one parent, the action leads to interchange
``LoopM`` with ``LoopN``.
``LoopM`` will be transformed into the outer loop and ``LoopN``
into the inner one.
This will effectively transform the ``i then j`` iteration order into
``j then i``.

For the following code example, things work as follows:


.. code-block:: C

     LoopO: for ( int i = 0; i < o; i++ ) {
     LoopN:   for ( int j = 0; j < n; j++ ) {
                _SLXLoopInterchange();
     LoopM:     for ( int k = 0; k < m; k++ ) {
                  out[i][j][k] = compute( in[i][j][k] );
            }}}


``_SLXLoopInterchange`` is added under ``LoopN``, which turns into the target
to be interchanged with ``LoopO``. This will effectively transform the
``i then j then k`` iteration order into ``j then i then k``.
Similarly, ``_SLXLoopInterchange`` could be applied to ``LoopM`` if the
directive is moved two lines down,
which would in turn switch the iteration order to ``i then k then j``.

The loop interchange transformation has a good impact on a design's
performance when by interchanging iteration orders one relaxes conditions
that limit parallelism or pipelining. If this is possible for a hotspot loop,
then one can achieve a good improvement in initiation intervals and latency.
The following code excerpt shows a situation that benefits from
``_SLXLoopInterchange``:

.. code-block:: C

     LoopN:  for(int i = 0; i < n; i += 1) {
     LoopM:    for(int j = 0; j < m; j += 1) {
                 _SLXLoopInterchange();
                 acc[i] = acc[i] + data[i][j];
             }}

In the code there is a loop carried dependency on variable ``acc`` in
the inner ``LoopM`` that blocks potential pipelining with II=1 under
certain circumstances.
Interchanging the loop moves the dependency from the inner to the outer loop
``LoopN``, effectively relaxing the constraint that blocks achieving pipeline
with II=1. For more information about this example and other cases that
benefit from ``_SLXLoopInterchange``, refer to the :ref:`examples`

``_SLXLoopInterchange`` can be used alone or in combination with other
Vitis HLS synthesis directives and constraints to achieve reduced latency and increased throughput.
When this happens, other Vitis HLS loop directives in the same loop of a
``_SLXLoopInterchange`` migrate to the new loop level after the interchange
is performed. This means that the following code:

.. code-block:: C

     LoopN: for ( int i = 0; i < n; i++ ) {
     LoopM:   for ( int j = 0; j < m; j++ ) {
                _SLXLoopInterchange();
                #pragma HLS pipeline
                out[i][j] = compute( in[i][j] );
            }}

will be transformed to:

.. code-block:: C

   LoopM: for ( int j = 0; j < m; j++ ) {
            #pragma HLS pipeline
   LoopN:   for ( int i = 0; i < n; i++ ) {
              out[i][j] = compute( in[i][j] );
          }}
  
.. attention::
   If the option ``-slx-loop-interchange`` or ``-slx-remove-directives``
   is not used, Vitis HLS will fail during synthesis with an error:
   ``WARNING: [HLS 200-412] 1_VALIDATOR__call_node_lacks_subCdfg`` and
   ``Stack dump: Running pass 'CDFG Construction Pass' on module 'a.o.2.bc'.``.
   Please check that the ``LLVM_CUSTOM_CMD`` is being set properly -
   this should appear in the Vitis HLS console output.


Transformation safety and legality
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Performing a loop interchange is not always safe or legal.
Exchanging the iteration order of a loop nest could sometimes lead to an
invalid computation.
The SLX Plugin incorporates a layer to detect transformation safety and
legality and rejects it when it is certain the interchange can't be applied. 
The following rules apply:

* Loop interchange is limited to perfect loop nests. This limitation will be
  relaxed in a future release.
* Dependency inversion issue: the transformation is rejected if by
  interchanging you will compute a value
  either earlier or later compared to its original use point. For example,
  you are reading from a row that is only updated in the future to compute a
  value that is needed in the present. ``SLXLoopInterchange`` checks for
  legality in this case and rejects the transformation.
* Floating point associativity issue: floating point computation
  is not necessarily associative. That is, ``(a + b) + c`` is not necessarily
  equal to ``a + (b + c)``. In many cases, this only leads to minor precision
  differences. ``SLXLoopInterchange`` won't try to reason about the user's
  intentions from this perspective. The suggested method is to address this
  via testbenches. If your testbench fails, disable ``SLXLoopInterchange``.
* Loop flatten conflict: when applied, ``SLXLoopInterchange`` disables the
  Vitis HLS loop flatten transformation. By default, loop flatten is
  automatically applied by Vitis HLS to perfect or semi-perfect loop nests.
  Additionally, it can be controlled with
  ``set_directive_loop_flatten`` in a Tcl directives script or with
  ``#pragma HLS loop_flatten`` in the C/C++ source code. If a
  ``_SLXLoopInterchange`` is applied to the same loop then a warning is
  reported:
  
  .. code-block:: none
  
     ``WARNING: [SLX] HLS flatten for '<loop>'(<location>) is disabled as the loop is transformed into a do-while loop``
   

* Loops composed of statically unknown bounds are not supported. If the safety
  check is not able to tell for certain that an access will be properly bounded
  when accessing the array, the loop gets rejected. In the following example,
  it is not possible to tell that ``m<=10``. Because ``a[0][10]`` addresses the
  same element as ``a[1][0]`` in the C memory model, there is a possibility
  that changing the iteration order will cause some data to be re-written
  by out-of-bound accesses. For this reason, it is forbidden.

  .. code-block:: C

     int a[10][10];
     void test(int n, int m) {
      for (int i = 0; i < n; ++i)
        for (int j = 0; j < m; ++j)
          a[i][j] = j; // This access is causing an issue
     }


.. Other cases not 100% understood yet:
   
   Seen in mri/reconstruction: std::cos was not being recognized as "safe to
   interchange" and -functionattrs
   doesn't propagate the information from the call to cosf that it calls
   (I think because the std::cos is implemented as a linkedonce_odr and
   -functionattrs doesn't feel it can update it, but I'm not sure).

.. _tidy-up:

IR design optimizations
-----------------------

The SLX Plugin contains a few automatic compiler transformations that help
improve an HLS design's internal program representation before the RTL code is
generated.
The most interesting scenario is when it helps to booster Vitis HLS'
capabilities for automatic relocation of loop invariant memory accesses.
While this doesn't apply to all HLS designs, some designs benefit from
improved results when, for example, expensive memory accesses are manipulated
in a way that they end up outside of a loop nest.
In particular, if the loop nest happens to be a computation hotspot,
this can be of tremendous help to improve latency and throughput without
manual C/C++ source code changes.

This feature doesn't require adding directives to source code. It is enabled
by using the options ``-slx-prepare-for-interchange`` and ``-slx-prepare-all``
in the Tcl command that injects the SLX Plugin to the Vitis compilation process.
If both options are specified, then IR design optimizations are
applied to all functions in the design. If ``-slx-prepare-all`` is not
specified, then IR design optimizations will only apply to functions that
contain an ``_SLXLoopInterchange`` directive in one of their loops. 
For more information about the Tcl command, see :ref:`vitis-tcl-proj`.
For more information about the options, see the :ref:`options`.

An example that shows and explains an IR design optimization is provided in
:ref:`examples`. Refer to the ``tiny-sha3`` folder.


.. _options:

Options reference guide
-----------------------

The SLX Plugin currently supports the following options that control its
behavior:

* ``-slx-prepare-for-interchange``: perform IR design optimization passes
  and enablers for loop interchange. By default, this only applies for functions
  calling ``_SLXLoopInterchange()``. To change the default behavior, see
  ``-slx-prepare-all``. It reports in the console if it knows it will result in
  a Xilinx HLS pragma not applying:

  .. code-block:: none

     ``WARNING: [SLX] HLS flatten for '<loop>'(<location>) is disabled as the loop is transformed into a do-while loop``

* ``-slx-prepare-all``: only valid in combination with
  ``-slx-prepare-for-interchange``. When given, IR design optimization passes
  are applied to all functions and not only those containing
  ``_SLXLoopInterchange()``.

* ``-slx-loop-interchange``: perform loop interchange if possible.
  By default, only do so for functions calling ``_SLXLoopInterchange()``.
  It reports in the console if the interchange was successful:

  .. code-block:: none

     ``SLX-INFO: _SLXLoopInterchange applied successfully``
     ``SLX-ERROR: _SLXLoopInterchange was requested but was not successfully applied``

* ``-slx-fatal-unapplied-interchange``: only valid in combination with
  ``-slx-loop-interchange``. The default is to issue an ``ERROR`` if the
  ``_SLXLoopInterchange()`` is not applied, but when given with the ``=FALSE``
  suffix a non-fatal ``WARNING`` is produced instead.

* ``-slx-remove-directives``: delete ``_SLXLoopInterchange()``. This is useful
  if the current solution should not include loop-interchange, or if
  loop-interchange was not possible and you wish to ignore this.

For example, if all options are applied, the last command in the setup Tcl
script will be:

.. code-block:: none

   # add slxplugin.so using Vitis HLS injection mechanism
   set ::LLVM_CUSTOM_CMD [concat \
       {$LLVM_CUSTOM_OPT -load} $slxplugin/lib/slxplugin.so \
       -slx-prepare-for-interchange \
       -slx-prepare-all \
       -slx-loop-interchange \
       -slx-remove-directives \
       {$LLVM_CUSTOM_INPUT -o $LLVM_CUSTOM_OUTPUT}]

.. Links, footnotes, etc...

.. _SLX FPGA: https://www.silexica.com/products/slx-fpga
.. _SLX FPGA User Guide: https://www.silexica.com/wp-content/uploads/SLX-FPGA-User-Guide-2020.3.pdf


.. rubric:: Footnotes

.. [#f1] The SLX Plugin is only officially supported on Ubuntu 18.04 on x86_64
   architectures. However, it is also known to work with Ubuntu 16.04. Try
   Ubuntu 16.04 at your own risk.

.. [#f2] The C function call style syntax will be modified in a future release
   to be syntactically closer to Xilinx HLS pragmas.

